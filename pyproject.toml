[project]
name = "pydantic-kitbash"
dynamic = ["version"]
description = "Sphinx extension for documenting Pydantic models"
readme = "README.md"
dependencies = [

]
requires-python = ">=3.10"
license = "LGPL-3.0-or-later"
license-files = ["LICENSE"]

[tool.ruff]
line-length = 88
target-version = "py310"
src = ["starcraft", "tests"]
extend-exclude = ["docs"]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"
quote-style = "single"

[tool.ruff.lint]
# Follow ST063 - Maintaining and updating linting specifications for updating these.
# Handy link: https://docs.astral.sh/ruff/rules/
select = [  # Base linting rule selections.
    # See the internal document for discussion:
    # https://docs.google.com/document/d/1i1n8pDmFmWi4wTDpk-JfnWCVUThPJiggyPi2DYwBBu4/edit
    # All sections here are stable in ruff and shouldn't randomly introduce
    # failures with ruff updates.
    "F",  # The rules built into Flake8
    "E", "W",  # pycodestyle errors and warnings
    "I",  # isort checking
    "N",  # PEP8 naming
    "D",  # Implement pydocstyle checking as well.
    "UP",  # Pyupgrade - note that some of are excluded below due to Python versions
    "YTT",  # flake8-2020: Misuse of `sys.version` and `sys.version_info`
    "ANN",  # Type annotations.
    "ASYNC",  # Catching blocking calls in async functions
    # flake8-bandit: security testing. https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    # https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing
    "S101", "S102",  # assert or exec
    "S103", "S108",  # File permissions and tempfiles - use #noqa to silence when appropriate.
    "S104",  # Network binds
    "S105", "S106", "S107",  # Hardcoded passwords
    "S110",  # try-except-pass (use contextlib.suppress instead)
    "S113",  # Requests calls without timeouts
    "S3",  # Serialising, deserialising, hashing, crypto, etc.
    "S5",  # Unsafe cryptography or YAML loading.
    "S602",  # Subprocess call with shell=true
    "S701",  # jinja2 templates without autoescape
    "BLE",  # Do not catch blind exceptions
    "FBT",  # Disallow boolean positional arguments (make them keyword-only)
    "B0",  # Common mistakes and typos.
    "A",  # Shadowing built-ins.
    "COM",  # Trailing commas
    "C4", # Encourage comprehensions, which tend to be faster than alternatives.
    "T10",  # Don't call the debugger in production code
    "ISC",  # Implicit string concatenation that can cause subtle issues
    "ICN",  # Only use common conventions for import aliases.
    "INP",  # Implicit namespace packages
    # flake8-pie: miscellaneous linters (enabled individually because they're not really related)
    "PIE790",  # Unnecessary pass statement
    "PIE794",  # Multiple definitions of class field
    "PIE796",  # Duplicate value in an enum (reasonable to noqa for backwards compatibility)
    "PIE804",  # Don't use a dict with unnecessary kwargs
    "PIE807",  # prefer `list` over `lambda: []`
    "PIE810",  # Use a tuple rather than multiple calls. E.g. `mystr.startswith(("Hi", "Hello"))`
    "PYI",  # Linting for type stubs.
    "PT",  # Pytest
    "Q",  # Consistent quotations
    "RSE",  # Errors on pytest raises.
    "RET",  # Simpler logic after return, raise, continue or break
    "SLF",  # Prevent accessing private class members.
    "SIM",  # Code simplification
    "TID",  # Tidy imports
    # The team have chosen to only use type-checking blocks when necessary to prevent circular imports.
    # As such, the only enabled type-checking checks are those that warn of an import that needs to be
    # removed from a type-checking block.
    "TC004",  # Remove imports from type-checking guard blocks if used at runtime
    "TC005",  # Delete empty type-checking blocks
    "ARG",  # Unused arguments
    "PTH",  # Migrate to pathlib
    "FIX",  # All TODOs, FIXMEs, etc. should be turned into issues instead.
    "ERA",  # Don't check in commented out code
    "PGH",  # Pygrep hooks
    "PL",  # Pylint
    "TRY",  # Cleaner try/except,
    "FLY",  # Detect things that would be better as f-strings.
    "PERF",  # Catch things that can slow down the application like unnecessary casts to list.
    "RUF001", "RUF002", "RUF003",  # Ambiguous unicode characters
    "RUF005",  # Encourages unpacking rather than concatenation
    "RUF008",  # Do not use mutable default values for dataclass attributes
    "B035",    # Don't use static keys in dict comprehensions.
    "RUF013",  # Prohibit implicit Optionals (PEP 484)
    "RUF100",  # #noqa directive that doesn't flag anything
    "RUF200",  # If ruff fails to parse pyproject.toml...
]